From 8c1c0d5d8420b30066c7ea16950d4d6f2f4e6dae Mon Sep 17 00:00:00 2001
From: "Fomenko, Evarist M" <evarist.m.fomenko@intel.com>
Date: Tue, 6 Aug 2019 21:52:28 +0000
Subject: [PATCH] build: mkldnn compat: support cmake options

---
 CMakeLists.txt                       | 26 +-------
 cmake/gen_mkldnn_compat_cmakes.cmake | 46 +++++++++++++++
 cmake/mkldnn_compat.cmake            | 88 ++++++++++++++++++++++++++++
 cmake/platform.cmake                 |  5 ++
 src/CMakeLists.txt                   |  5 ++
 5 files changed, 145 insertions(+), 25 deletions(-)
 create mode 100644 cmake/gen_mkldnn_compat_cmakes.cmake
 create mode 100644 cmake/mkldnn_compat.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index fb2d49002..ed5d75d4e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -75,31 +75,7 @@ if(UNIX OR MINGW)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
 endif()
 
-# Tentative remapping of old options to the new one.
-# CAUTION: The old options will soon be removed.
-
-if(DNNL_THREADING)
-    set(DNNL_CPU_RUNTIME "${DNNL_THREADING}" CACHE STRING "" FORCE)
-    message(STATUS "Using the obsolete way to specify the CPU runtime. "
-        "Use DNNL_CPU_RUNTIME=${DNNL_CPU_RUNTIME} instead.")
-endif()
-
-if(DNNL_GPU_BACKEND)
-    if (DNNL_GPU_BACKEND STREQUAL "OPENCL")
-        set(DNNL_GPU_BACKEND "OCL" CACHE STRING "" FORCE)
-        message(STATUS "Using the obsolete way to specify the OpenCL runtime. "
-            "Use DNNL_GPU_RUNTIME=OCL instead.")
-    endif()
-    set(DNNL_GPU_RUNTIME "${DNNL_GPU_BACKEND}" CACHE STRING "" FORCE)
-    message(STATUS "Using the obsolete way to specify the GPU runtime. "
-        "Use DNNL_GPU_RUNTME=${DNNL_GPU_RUNTIME} instead.")
-endif()
-
-if (DNNL_GPU_RUNTIME STREQUAL "OPENCL")
-    set(DNNL_GPU_RUNTIME "OCL" CACHE STRING "" FORCE)
-    message(STATUS "Using the obsolete way to specify the OpenCL runtime. "
-        "Use DNNL_GPU_RUNTIME=OCL instead.")
-endif()
+include("cmake/mkldnn_compat.cmake")
 
 include("cmake/utils.cmake")
 include("cmake/options.cmake")
diff --git a/cmake/gen_mkldnn_compat_cmakes.cmake b/cmake/gen_mkldnn_compat_cmakes.cmake
new file mode 100644
index 000000000..007d16607
--- /dev/null
+++ b/cmake/gen_mkldnn_compat_cmakes.cmake
@@ -0,0 +1,46 @@
+#===============================================================================
+# Copyright 2019 Intel Corporation
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#===============================================================================
+
+# Creates cmake config for MKLDNN based on DNNL one
+# (by replacing DNNL with MKLDNN)
+# Parameters:
+#   DIR -- path to cmake install dir
+
+set(DNNL_DIR ${DIR}/dnnl)
+set(MKLDNN_DIR ${DIR}/mkldnn)
+
+file(MAKE_DIRECTORY ${MKLDNN_DIR})
+
+file(GLOB_RECURSE fs "${DNNL_DIR}/*")
+foreach(f ${fs})
+    # set the destination
+    file(RELATIVE_PATH frel ${DNNL_DIR} ${f})
+    string(REGEX REPLACE "dnnl" "mkldnn" dest_rel "${frel}")
+    set(dest "${MKLDNN_DIR}/${dest_rel}")
+    # message(STATUS "file: ${f} --> ${frel} --> ${dest_rel} --> ${dest}")
+
+    # read and change the content of the file
+    file(STRINGS ${f} contents NEWLINE_CONSUME)
+    string(REGEX REPLACE "DNNL" "MKLDNN" contents "${contents}")
+    string(REGEX REPLACE "dnnl" "mkldnn" contents "${contents}")
+    foreach (ext "a" "so" "dylib" "dll" "lib")
+        string(REGEX REPLACE "mkldnn[.]${ext}" "dnnl.${ext}" contents "${contents}")
+    endforeach()
+    string(REGEX REPLACE "lmkldnn" "ldnnl" contents "${contents}")
+
+    # store the result
+    file(WRITE ${dest} "${contents}")
+endforeach()
diff --git a/cmake/mkldnn_compat.cmake b/cmake/mkldnn_compat.cmake
new file mode 100644
index 000000000..153dc3fd0
--- /dev/null
+++ b/cmake/mkldnn_compat.cmake
@@ -0,0 +1,88 @@
+#===============================================================================
+# Copyright 2019 Intel Corporation
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#===============================================================================
+
+# Provides compatibility with Intel MKL-DNN build options
+#===============================================================================
+
+# Sets if dnnl var is unset, copy the value from mkldnn var
+macro(mkldnn_compat_var dnnl_var mkldnn_var props)
+    if (DEFINED ${mkldnn_var} AND NOT DEFINED ${dnnl_var})
+        if ("${props}" STREQUAL "CACHE STRING")
+            set(${dnnl_var} "${${mkldnn_var}}" CACHE STRING "" FORCE)
+        elseif ("${props}" STREQUAL "CACHE BOOL")
+            set(${dnnl_var} "${${mkldnn_var}}" CACHE BOOL "" FORCE)
+        else()
+            set(${dnnl_var} "${${mkldnn_var}}")
+        endif()
+        message(STATUS "MKL-DNN compat: "
+            "set ${dnnl_var} to ${mkldnn_var} with value `${${dnnl_var}}`")
+    endif()
+endmacro()
+
+set(COMPAT_CACHE_BOOL_VARS
+    "VERBOSE"
+    "ENABLE_CONCURRENT_EXEC"
+    "BUILD_EXAMPLES"
+    "BUILD_TESTS"
+    "BUILD_FOR_CI"
+    "WERROR"
+    "ENABLE_JIT_PROFILING"
+    )
+
+set(COMPAT_CACHE_STRING_VARS
+    "LIBRARY_TYPE"
+    "INSTALL_MODE"
+    "ARCH_OPT_FLAGS"
+    "CPU_RUNTIME"
+    "GPU_RUNTIME"
+    "USE_CLANG_SANITIZER"
+    )
+
+# Map MKLDNN_ to DNNL_ options
+
+foreach (var ${COMPAT_CACHE_BOOL_VARS})
+    mkldnn_compat_var("DNNL_${var}" "MKLDNN_${var}" "CACHE BOOL")
+endforeach()
+mkldnn_compat_var(_DNNL_USE_MKL _MKLDNN_USE_MKL "CACHE BOOL")
+
+foreach (var ${COMPAT_CACHE_STRING_VARS})
+    mkldnn_compat_var("DNNL_${var}" "MKLDNN_${var}" "CACHE STRING")
+endforeach()
+
+# Handle legacy options: MKLDNN_THREADING and MKLDNN_GPU_BACKEND.
+
+if(MKLDNN_THREADING)
+    set(DNNL_CPU_RUNTIME "${DNNL_THREADING}" CACHE STRING "" FORCE)
+    message(STATUS "Using the obsolete way to specify the CPU runtime. "
+        "Use DNNL_CPU_RUNTIME=${DNNL_CPU_RUNTIME} instead.")
+endif()
+
+if(MKLDNN_GPU_BACKEND)
+    if (MKLDNN_GPU_BACKEND STREQUAL "OPENCL")
+        set(MKLDNN_GPU_BACKEND "OCL" CACHE STRING "" FORCE)
+        message(STATUS "Using the obsolete way to specify the OpenCL runtime. "
+            "Use DNNL_GPU_RUNTIME=OCL instead.")
+    endif()
+    set(DNNL_GPU_RUNTIME "${MKLDNN_GPU_BACKEND}" CACHE STRING "" FORCE)
+    message(STATUS "Using the obsolete way to specify the GPU runtime. "
+        "Use DNNL_GPU_RUNTME=${DNNL_GPU_RUNTIME} instead.")
+endif()
+
+if (MKLDNN_GPU_RUNTIME STREQUAL "OPENCL")
+    set(DNNL_GPU_RUNTIME "OCL" CACHE STRING "" FORCE)
+    message(STATUS "Using the obsolete way to specify the OpenCL runtime. "
+        "Use DNNL_GPU_RUNTIME=OCL instead.")
+endif()
diff --git a/cmake/platform.cmake b/cmake/platform.cmake
index e070ee66e..81c59a029 100644
--- a/cmake/platform.cmake
+++ b/cmake/platform.cmake
@@ -34,6 +34,11 @@ set(CMAKE_CCXX_FLAGS)
 set(CMAKE_CCXX_NOWARN_FLAGS)
 set(DEF_ARCH_OPT_FLAGS)
 
+# Compatibility with MKL-DNN
+if($ENV{MKLDNN_WERROR})
+    set(DNNL_WERROR $ENV{MKLDNN_WERROR})
+endif()
+
 if($ENV{DNNL_WERROR})
     set(DNNL_WERROR $ENV{DNNL_WERROR})
 endif()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e41af4216..07c4448ab 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -121,6 +121,11 @@ install(EXPORT ${LIB_EXPORT_NAME}
     NAMESPACE ${LIB_NAMESPACE}
     DESTINATION ${LIB_CONFIG_INSTALL_DIR})
 
+# MKL-DNN compat cmake files
+install(CODE "execute_process(COMMAND ${CMAKE_COMMAND}
+    -DDIR=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake
+    -P ${PROJECT_SOURCE_DIR}/cmake/gen_mkldnn_compat_cmakes.cmake)")
+
 # Install custom find modules for transitive dependencies
 if(DNNL_CPU_RUNTIME STREQUAL "TBB")
     if(WIN32)
-- 
2.22.0

